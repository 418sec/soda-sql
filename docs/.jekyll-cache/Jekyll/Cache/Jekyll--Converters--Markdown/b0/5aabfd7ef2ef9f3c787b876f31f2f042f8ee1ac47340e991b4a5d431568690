I"“<h1 id="soda-sql">Soda SQL</h1>

<p>Data testing and monitoring for SQL accessible data.</p>

<p><strong>What does Soda SQL do?</strong></p>

<p>Soda SQL allows you to</p>

<ul>
  <li>Stop your pipeline when bad data is detected</li>
  <li>Extract metrics and column profiles through super efficient SQL</li>
  <li>Full control over metrics and queries through declarative config files</li>
</ul>

<p><strong>Why Soda SQL?</strong></p>

<p>To protect against silent data issues for the consumers of your data,
itâ€™s best-practice to profile and test your data:</p>

<ul>
  <li>as it lands in your warehouse,</li>
  <li>after every important data processing step</li>
  <li>right before consumption.</li>
</ul>

<p>This way you will prevent delivery of bad data to downstream consumers.
You will spend less time firefighting and gain a better reputation.</p>

<p><strong>How does Soda SQL work?</strong></p>

<p>Soda SQL is a Command Line Interface (CLI) and a Python library to measure
and test your data using SQL.</p>

<p>As input, Soda SQL uses YAML configuration files that include:</p>
<ul>
  <li>SQL connection details</li>
  <li>What metrics to compute</li>
  <li>What tests to run on the measurements</li>
</ul>

<p>Based on those configuration files, Soda SQL will perform scans.  A scan
performs all measurements and runs all tests associated with one table.  Typically
a scan is executed after new data has arrived.  All soda-sql configuration files
can be checked into your version control system as part of your pipeline
code.</p>

<blockquote>
  <p>Want to try Soda SQL? Head over to our <a href="https://docs.soda.io/soda-sql/getting-started/5_min_tutorial.html">â€˜5 minute tutorialâ€™</a> and get started straight away!</p>
</blockquote>

<p><strong>Show me the money</strong></p>

<p>Simple metrics and tests can be configured in YAML configuration files called <code class="language-plaintext highlighter-rouge">scan.yml</code>. An example
of the contents of such a file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">metrics</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">row_count</span>
    <span class="pi">-</span> <span class="s">missing_count</span>
    <span class="pi">-</span> <span class="s">missing_percentage</span>
    <span class="pi">-</span> <span class="s">values_count</span>
    <span class="pi">-</span> <span class="s">values_percentage</span>
    <span class="pi">-</span> <span class="s">valid_count</span>
    <span class="pi">-</span> <span class="s">valid_percentage</span>
    <span class="pi">-</span> <span class="s">invalid_count</span>
    <span class="pi">-</span> <span class="s">invalid_percentage</span>
    <span class="pi">-</span> <span class="s">min</span>
    <span class="pi">-</span> <span class="s">max</span>
    <span class="pi">-</span> <span class="s">avg</span>
    <span class="pi">-</span> <span class="s">sum</span>
    <span class="pi">-</span> <span class="s">min_length</span>
    <span class="pi">-</span> <span class="s">max_length</span>
    <span class="pi">-</span> <span class="s">avg_length</span>
<span class="na">columns</span><span class="pi">:</span>
    <span class="na">ID</span><span class="pi">:</span>
        <span class="na">metrics</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">distinct</span>
            <span class="pi">-</span> <span class="s">duplicate_count</span>
        <span class="na">valid_format</span><span class="pi">:</span> <span class="s">uuid</span>
        <span class="na">tests</span><span class="pi">:</span>
            <span class="na">duplicates</span><span class="pi">:</span> <span class="s">duplicate_count == </span><span class="m">0</span>
    <span class="na">CATEGORY</span><span class="pi">:</span>
        <span class="na">missing_values</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">N/A</span>
            <span class="pi">-</span> <span class="s">No category</span>
        <span class="na">tests</span><span class="pi">:</span>
            <span class="na">missing</span><span class="pi">:</span> <span class="s">missing_percentage &lt; </span><span class="m">3</span>
    <span class="na">SIZE</span><span class="pi">:</span>
        <span class="na">metrics</span><span class="pi">:</span>
            <span class="pi">-</span>
        <span class="na">tests</span><span class="pi">:</span>
            <span class="na">spread</span><span class="pi">:</span> <span class="s">max - min &lt; </span><span class="m">20</span>
</code></pre></div></div>

<p>Metrics arenâ€™t limited to the ones defined by Soda SQL. You can create your own custom SQL metric definitions
with a simple yml file.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">metrics</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">total_volume_us</span>
<span class="na">sql</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">SELECT sum(volume) as total_volume_us</span>
    <span class="s">FROM CUSTOMER_TRANSACTIONS</span>
    <span class="s">WHERE country = 'US'</span>
<span class="na">tests</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">total_volume_us &gt; </span><span class="m">5000</span>
</code></pre></div></div>

<p>Based on these configuration files, Soda SQL will scan your data
each time new data arrived like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>soda scan ./soda/metrics my_warehouse my_dataset
Soda 1.0 scan <span class="k">for </span>dataset my_dataset on prod my_warehouse
  | SELECT column_name, data_type, is_nullable
  | FROM information_schema.columns
  | WHERE lower<span class="o">(</span>table_name<span class="o">)</span> <span class="o">=</span> <span class="s1">'customers'</span>
  |   AND table_catalog <span class="o">=</span> <span class="s1">'datasource.database'</span>
  |   AND table_schema <span class="o">=</span> <span class="s1">'datasource.schema'</span>
  - 0.256 seconds
Found 4 columns: ID, NAME, CREATE_DATE, COUNTRY
  | SELECT
  |  COUNT<span class="o">(</span><span class="k">*</span><span class="o">)</span>,
  |  COUNT<span class="o">(</span>CASE WHEN ID IS NULL THEN 1 END<span class="o">)</span>,
  |  COUNT<span class="o">(</span>CASE WHEN ID IS NOT NULL AND ID regexp <span class="s1">'\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b'</span> THEN 1 END<span class="o">)</span>,
  |  MIN<span class="o">(</span>LENGTH<span class="o">(</span>ID<span class="o">))</span>,
  |  AVG<span class="o">(</span>LENGTH<span class="o">(</span>ID<span class="o">))</span>,
  |  MAX<span class="o">(</span>LENGTH<span class="o">(</span>ID<span class="o">))</span>,
  | FROM customers
  - 0.557 seconds
row_count : 23543
missing   : 23
invalid   : 0
min_length: 9
avg_length: 9
max_length: 9

...more queries...

47 measurements computed
23 tests executed
All is good. No tests failed. Scan took 23.307 seconds
</code></pre></div></div>

<p>The next step is to add Soda SQL scans in your favorite
data pipeline orchestration solution like:</p>

<ul>
  <li>Airflow</li>
  <li>AWS Glue</li>
  <li>Prefect</li>
  <li>Dagster</li>
  <li>Fivetran</li>
  <li>Matillion</li>
  <li>Luigi</li>
</ul>

<p>If you like the goals of this project, encourage us! Star <a href="https://github.com/sodadata/soda-sql">sodadata/soda-sql on Github</a>.</p>

<blockquote>
  <p>Next, head over to our <a href="https://docs.soda.io/soda-sql/getting-started/5_min_tutorial">â€˜5 minute tutorialâ€™</a> and get your first project going!</p>
</blockquote>
:ET