I"€<h1 id="time-partitioning">Time partitioning</h1>

<p>This section explains how to run metrics and tests on a single time partition
of the table.</p>

<p>Time partitioning requires 1 (or more) columns which reflect the time or date.
The goal is to run a scan on a partition of the data which corresponds to a
particular time period.</p>

<p>Let‚Äôs use this <code class="language-plaintext highlighter-rouge">CUSTOMER_TRANSACTIONS</code> table as an example:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">CUSTOMER_TRANSACTIONS</span> <span class="p">(</span>
  <span class="n">ID</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
  <span class="n">NAME</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
  <span class="k">SIZE</span> <span class="nb">INT</span><span class="p">,</span>
  <span class="nb">DATE</span> <span class="nb">DATE</span><span class="p">,</span>
  <span class="n">FEEPCT</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
  <span class="n">COUNTRY</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">CUSTOMER_TRANSACTIONS</code> has a <code class="language-plaintext highlighter-rouge">DATE</code> column.  Each day new customer transaction
rows are added.  After they are added the goal is to run the scan on the customer
transactions of the last day.</p>

<p>In the <code class="language-plaintext highlighter-rouge">scan.yml</code>, add a <code class="language-plaintext highlighter-rouge">time_filter</code> like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">table_name</span><span class="pi">:</span> <span class="s">CUSTOMER_TRANSACTIONS</span>
<span class="na">time_filter</span><span class="pi">:</span> <span class="s2">"</span><span class="s">date</span><span class="nv"> </span><span class="s">=</span><span class="nv"> </span><span class="s">DATE</span><span class="nv"> </span><span class="s">''"</span>
<span class="na">metrics</span><span class="pi">:</span> <span class="s">...</span>
<span class="na">columns</span><span class="pi">:</span> <span class="s">...</span>
</code></pre></div></div>

<p>The time filter is added to the SQL queries in the where clause.</p>

<p>The <code class="language-plaintext highlighter-rouge">date</code> can be passed to the scan as a variable on the command line like:</p>

<blockquote>
  <p><em>Note: CLI does not yet support variables. Coming soon.  Use programmatic style below</em></p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>soda scan -v date=2021-01-12 ./sales_snowflake customer_transactions
</code></pre></div>  </div>
</blockquote>

<p>And programmatically, variables can be passed to a scan like this:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scan_builder</span> <span class="o">=</span> <span class="n">ScanBuilder</span><span class="p">()</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">read_scan_dir</span><span class="p">(</span><span class="s">'~/my_warehouse_dir'</span><span class="p">,</span> <span class="s">'my_table_dir'</span><span class="p">)</span>
<span class="n">scan</span> <span class="o">=</span> <span class="n">scan_builder</span><span class="p">.</span><span class="n">build</span><span class="p">()</span>
<span class="n">scan_result</span> <span class="o">=</span> <span class="n">scan</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
<span class="k">if</span> <span class="n">scan_result</span><span class="p">.</span><span class="n">has_failures</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Scan has test failures, stop the pipeline'</span><span class="p">)</span>
</code></pre></div></div>

<p>For time partitioned tables, it makes sense to measure and test on both
the time partitions and on the full table.  To achieve this, we recommend
that you create 2 separate table dirs for it each having a <code class="language-plaintext highlighter-rouge">scan.yml</code>.
It‚Äôs a good practice to add <code class="language-plaintext highlighter-rouge">_tp</code> as the suffix to the table
directory to indicate it‚Äôs a ‚ÄúTime Partitioned‚Äù table configuration.</p>
:ET