I"/<h1 id="orchestrate-scans">Orchestrate scans</h1>

<p>This section explains how to run scans as part of your data pipeline and
stop the pipeline when necessary to prevent bad data flowing downstream.</p>

<p>Soda SQL is build in such a way that it’s easy to run it as a step in your
pipeline orchestration.</p>

<p>Use your orchestration tool to configure if the soda scan should be blocking the pipeline
(for testing) or run in parallel (for monitoring).</p>

<h2 id="programmatic-scans">Programmatic scans</h2>

<p>Here’s how to run scans using Python:</p>

<p>Programmatic scan execution based on default dir structure:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scan_builder</span> <span class="o">=</span> <span class="n">ScanBuilder</span><span class="p">()</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">read_scan_dir</span><span class="p">(</span><span class="s">'~/my_warehouse_dir'</span><span class="p">,</span> <span class="s">'my_table_dir'</span><span class="p">)</span>
<span class="n">scan</span> <span class="o">=</span> <span class="n">scan_builder</span><span class="p">.</span><span class="n">build</span><span class="p">()</span>
<span class="n">scan_result</span> <span class="o">=</span> <span class="n">scan</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
<span class="k">if</span> <span class="n">scan_result</span><span class="p">.</span><span class="n">has_failures</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Scan has test failures, stop the pipeline'</span><span class="p">)</span>
</code></pre></div></div>

<p>Programmatic scan execution reading yaml files by path:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scan_builder</span> <span class="o">=</span> <span class="n">ScanBuilder</span><span class="p">()</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">read_warehouse_yml</span><span class="p">(</span><span class="s">'./anydir/warehouse.yml'</span><span class="p">)</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">read_scan_yml</span><span class="p">(</span><span class="s">'./anydir/scan.yml'</span><span class="p">)</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">read_sql_metrics_from_dir</span><span class="p">(</span><span class="s">'./anydir/'</span><span class="p">)</span>
<span class="n">scan</span> <span class="o">=</span> <span class="n">scan_builder</span><span class="p">.</span><span class="n">build</span><span class="p">()</span>
<span class="n">scan_result</span> <span class="o">=</span> <span class="n">scan</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
<span class="k">if</span> <span class="n">scan_result</span><span class="p">.</span><span class="n">has_failures</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Scan has test failures, stop the pipeline'</span><span class="p">)</span>
</code></pre></div></div>

<p>Programmatic scan execution using dicts:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scan_builder</span> <span class="o">=</span> <span class="n">ScanBuilder</span><span class="p">()</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">warehouse_dict</span><span class="p">({</span>
    <span class="s">'name'</span><span class="p">:</span> <span class="s">'my_warehouse_name'</span><span class="p">,</span>
    <span class="s">'connection'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'type'</span><span class="p">:</span> <span class="s">'snowflake'</span><span class="p">,</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">})</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">scan_dict</span><span class="p">({...})</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">sql_metric_dict</span><span class="p">({...})</span>
<span class="n">scan_builder</span><span class="p">.</span><span class="n">sql_metric_dict</span><span class="p">({...})</span>
<span class="n">scan</span> <span class="o">=</span> <span class="n">scan_builder</span><span class="p">.</span><span class="n">build</span><span class="p">()</span>
<span class="n">scan_result</span> <span class="o">=</span> <span class="n">scan</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
<span class="k">if</span> <span class="n">scan_result</span><span class="p">.</span><span class="n">has_failures</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Scan has test failures, stop the pipeline'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="airflow">Airflow</h2>

<p>TODO: describe how to run Soda scans in Airflow.</p>

<p>If you’re reading this and thinking: “I want to contribute!” Great.
<a href="https://github.com/sodadata/soda-sql/discussions/new?title=Contributing%20Airflow">Post an note on GitHub</a> to let
others know you’re starting on this.</p>

<h2 id="other-orchestration-solutions">Other orchestration solutions</h2>

<p>TODO: describe how to run Soda scans in orchestration tools like</p>

<ul>
  <li>AWS Glue</li>
  <li>Prefect</li>
  <li>Dagster</li>
  <li>Fivetran</li>
  <li>Matillion</li>
  <li>Luigi</li>
</ul>

<p>If you’re reading this and thinking: “I want to contribute!” Great.
<a href="https://github.com/sodadata/soda-sql/discussions/new">Post an note on GitHub</a> to let others know
you’re starting on this.</p>
:ET